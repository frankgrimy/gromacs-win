# This workflow is triggered on a tag in the upstream repository. It builds the Windows version of GROMACS using the latest MSVC compiler.
name: Build on upstream tag

env:
  CMAKE_VERSION: 3.28.0
  NINJA_VERSION: 1.12.1
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.10.2
  NINJA_STATUS: "[%f/%t %o/sec] "

on:
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight
  workflow_dispatch:
  # push:
  #   tags:
  #     - 'v*' # Match any tag starting with 'v'

# jobs:
#   sync-and-build:
#     runs-on: windows-2019

#     env:
#       CC: cl
#       CXX: cl
#       CI_JOB_ID: ${{ github.sha }} # Tell CMake it's running in CI
#       OPENMP_VAR: Off
#       GPU_VAR: Off
#       ENVIRONMENT_SCRIPT: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

#     steps:
#     - uses: actions/checkout@v4
#       with:
#         show-progress: false

#     - name: Download Ninja, CMake, and CCache
#       run: cmake -P .github/scripts/download-ninja-cmake.cmake

#     - name: ccache cache files
#       uses: actions/cache@v4
#       with:
#         path: .ccache

# jobs:
#   build:
#     name: ${{ matrix.config.name }}
#     runs-on: ${{ matrix.config.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         config:
#         - {
#             name: "Windows Latest MSVC", artifact: "Windows-MSVC.7z",
#             os: windows-2019,
#             cc: "cl", cxx: "cl",
#             environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
#             gpu_var: "Off",
#             openmp_var: "Off"
#           }
#         # - {
#         #     name: "macOS Latest Clang", artifact: "macOS.7z",
#         #     os: macos-latest,
#         #     cc: "clang", cxx: "clang++",
#         #     gpu_var: "Off",
#         #     openmp_var: "Off"
#         #   }
#         # - {
#         #     name: "macOS Latest GCC 14 with OpenCL", artifact: "macOS-gcc-OpenCL.7z",
#         #     os: macos-latest,
#         #     cc: "gcc-14", cxx: "g++-14",
#         #     gpu_var: "OpenCL",
#         #     openmp_var: "On"
#         #   }

#     env:
#       CC: ${{ matrix.config.cc }}
#       CXX: ${{ matrix.config.cxx }}
#       CI_JOB_ID: ${{ github.sha }} # Tell CMake it's running in CI
#       OPENMP_VAR: ${{ matrix.config.openmp_var }}
#       GPU_VAR: ${{ matrix.config.gpu_var }}
#       ENVIRONMENT_SCRIPT: ${{ matrix.config.environment_script }}

#     steps:
#     - uses: actions/checkout@v4
#       with:
#         show-progress: false

#     - name: Download Ninja, CMake, and CCache
#       run: cmake -P .github/scripts/download-ninja-cmake.cmake

#     - name: ccache cache files
#       uses: actions/cache@v4
#       with:
#         path: .ccache
#         key: ${{ matrix.config.name }}-ccache-${{ github.sha }}
#         restore-keys: |
#           ${{ matrix.config.name }}-ccache-

#     - name: Configure
#       run: cmake -P .github/scripts/configure.cmake

#     - name: Build
#       #run: cmake --build . --config ${{ env.BUILD_TYPE }} --target package
#       run: cmake -P .github/scripts/build.cmake

#     - name: Run tests
#       run: cmake -P .github/scripts/test.cmake

#     # - name: Upload artifact
#     #   uses: actions/upload-artifact@v2
#     #   with:
#     #     name: ${{ matrix.config.artifact }}

jobs:
  sync-and-build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.7z",
            os: windows-2019,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            gpu_var: "Off",
            openmp_var: "Off"
          }

    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      CI_JOB_ID: ${{ github.sha }} # Tell CMake it's running in CI
      OPENMP_VAR: ${{ matrix.config.openmp_var }}
      GPU_VAR: ${{ matrix.config.gpu_var }}
      ENVIRONMENT_SCRIPT: ${{ matrix.config.environment_script }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Set up Git
      run: |
        git remote add upstream https://github.com/gromacs/gromacs.git
        git fetch upstream --tags

    - name: Sync with upstream
      run: |
        git checkout main
        git pull upstream main
        git push origin main
      
    - name: Check out the latest tag
      run: |
        $latest_tag = git describe --tags $(git rev-list --tags --max-count=1)
        git checkout $latest_tag

    - name: Download Ninja, CMake, and CCache
      run: cmake -P .github/scripts/download-ninja-cmake.cmake

    - name: ccache cache files
      uses: actions/cache@v4
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: Configure
      run: cmake -P .github/scripts/configure.cmake

    - name: Build
      run: cmake -P .github/scripts/build.cmake

    - name: Run tests
      run: cmake -P .github/scripts/test.cmake


    # runs-on: windows-2019

    # steps:
    # - name: Checkout repository
    #   uses: actions/checkout@v2
    #   with:
    #     fetch-depth: 0
      
    # - name: Set up Git
    #   run: |
    #     git remote add upstream https://github.com/gromacs/gromacs.git
    #     git fetch upstream --tags

    # - name: Sync with upstream
    #   run: |
    #     git checkout main
    #     git pull upstream main
    #     git push origin main

    # - name: Check out the latest tag
    #   run: |
    #     $latest_tag = git describe --tags $(git rev-list --tags --max-count=1)
    #     git checkout $latest_tag
      
    # - name: Download Ninja, CMake, and CCache
    #   run: cmake -P .github/scripts/download-ninja-cmake.cmake

    # - name: ccache cache files
    #   uses: actions/cache@v4
    #   with:
    #     path: .ccache
    #     key: ${{ github.sha }}
    #     restore-keys: |
    #       ${{ github.sha }}

    # - name: Configure
    #   run: cmake -P .github/scripts/configure.cmake

    # - name: Build
    #   run: cmake -P .github/scripts/build.cmake

    # - name: Run tests
    #   run: cmake -P .github/scripts/test.cmake
