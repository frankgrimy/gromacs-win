# This workflow is triggered on a tag in the upstream repository. It builds the Windows version of GROMACS using the latest MSVC compiler.
name: Build on upstream tag

env:
  CMAKE_VERSION: 3.28.0
  NINJA_VERSION: 1.12.1
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.10.2
  NINJA_STATUS: "[%f/%t %o/sec] "

on:
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight
  workflow_dispatch:
  # push:
  #   tags:
  #     - 'v*' # Match any tag starting with 'v'

jobs:
  sync-and-build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.zip",
            os: windows-2019,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            gpu_var: "Off",
            openmp_var: "Off"
          }

    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      CI_JOB_ID: ${{ github.sha }} # Tell CMake it's running in CI
      OPENMP_VAR: ${{ matrix.config.openmp_var }}
      GPU_VAR: ${{ matrix.config.gpu_var }}
      ENVIRONMENT_SCRIPT: ${{ matrix.config.environment_script }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Set up Git
      run: |
        git remote add upstream https://github.com/gromacs/gromacs.git
        git fetch upstream --tags

    - name: Sync with upstream
      run: |
        git checkout main
        git pull upstream main
        git push origin main
      
    - name: Check out the latest tag
      run: |
        $TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        git checkout $TAG
        echo "TAG=$TAG" >> $GITHUB_ENV        

    - name: Download Ninja, CMake, and CCache
      run: cmake -P .github/scripts/download-ninja-cmake.cmake

    - name: ccache cache files
      uses: actions/cache@v4
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    # - name: Configure
    #   run: cmake -P .github/scripts/configure.cmake

    # - name: Build
    #   run: cmake -P .github/scripts/build.cmake

    # - name: Run tests
    #   run: cmake -P .github/scripts/test.cmake

    
    - name: Compress build artifacts as zip
      run: |
        mkdir -p artifacts
        ls .\
        ls .\build
        ls .\build\bin
        ls .\build\lib
        ls .\share
        
        # mkdir .\share\gromacs
        # mv .\share\template .\share\gromacs
        # mv .\share\top .\share\gromacs
        # rm .\share\CMakeLists.txt
        # rm .\share\README*

        # Compress-Archive -Path .\build\bin\gmx.exe -DestinationPath .\artifacts\gromacs-win-${{ env.TAG }}.zip -Force

        # Compress-Archive -Path .\build\lib\gmx.exp -DestinationPath .\artifacts\gromacs-win-${{ env.TAG }} -Update
        # Compress-Archive -Path .\build\lib\gmx.lib -DestinationPath .\artifacts\gromacs-win-${{ env.TAG }} -Update
        # Compress-Archive -Path .\build\lib\gromacs.lib -DestinationPath .\artifacts\gromacs-win-${{ env.TAG }} -Update
        # Compress-Archive -Path .\build\lib\muparser.lib -DestinationPath .\artifacts\gromacs-win-${{ env.TAG }} -Update

        # Compress-Archive -Path .\share\gromacs -DestinationPath .\artifacts\gromacs-win-${{ env.TAG }} -Update

        # Compress-Archive -Path .\share\ -DestinationPath .\artifacts\gromacs-win-${{ env.TAG }} -Update
        
    # - name: Save build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: Gromacs Windows ${{ env.TAG }}
    #     path: artifacts\gromacs-win-${{ env.TAG }}.zip

  # create-release:
  #   name: Create release
  #   runs-on: ubuntu-latest



    # - name: Archive build artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: gromacs-windows-exe
    #     path: build/bin/*.exe

    # - name: Create release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: |
    #       Changes in this release:
    #       - Added support for Windows
    #     draft: false
    #     prerelease: false